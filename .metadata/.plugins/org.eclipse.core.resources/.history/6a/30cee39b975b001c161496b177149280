package com.jquevedo.controller;

import java.net.URI;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import com.jquevedo.exception.ModelNotFoundException;
import com.jquevedo.model.Tareas;
import com.jquevedo.model.Usuarios;
import com.jquevedo.repo.UsuarioRepo;
import com.jquevedo.service.TareasService;
import com.jquevedo.util.Constantes;

@RestController
@RequestMapping("/Tarea")
public class TareasController {

	@Autowired
	private TareasService service;

	@Autowired
	UsuarioRepo repo;

	@PostMapping
	public ResponseEntity<Tareas> registrar(@RequestBody Tareas t) throws Exception {
		Usuarios usuario = repo.findOneByUsername(t.getUsuarios().getUsername());
		if (usuario == null) {
			throw new ModelNotFoundException("nombre de Usuario no existe " + t.getUsuarios().getUsername());
		}
		t.setUsuarios(usuario);
		Tareas tarea = service.registrar(t);
		URI location = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}").buildAndExpand(tarea.getIdTarea())
				.toUri();
		return ResponseEntity.created(location).build();
	}

	@GetMapping
	public ResponseEntity<List<Tareas>> listar() throws Exception {
		List<Tareas> listaTareas = service.listar();
		return new ResponseEntity<List<Tareas>>(listaTareas, HttpStatus.OK);
	}

	@PutMapping
	public ResponseEntity<Tareas> modificar(@RequestBody Tareas t) throws Exception {
		Tareas obj = service.listarPorId(t.getIdTarea());
		if (obj == null) {
			throw new ModelNotFoundException("Tarea no existe. ID: " + t.getIdTarea());
		}
		Tareas solicitud = service.modificar(t);
		return new ResponseEntity<Tareas>(solicitud, HttpStatus.OK);
	}

	@GetMapping("listarUser/{nombreUser}")
	public ResponseEntity<List<Tareas>> listarPorUsuario(@PathVariable("nombreUser") String nombreUser)
			throws Exception {
		Usuarios usuario = repo.findOneByUsername(nombreUser);
		if (usuario == null) {
			throw new ModelNotFoundException("nombre de Usuario no existe " + nombreUser);
		}
		List<Tareas> listaTareas = service.listarUsuario(usuario.getIdUsuario());
		return new ResponseEntity<List<Tareas>>(listaTareas, HttpStatus.OK);
	}

	@DeleteMapping("/{id}")
	public ResponseEntity<Void> eliminar(@PathVariable("id") Integer id) {
		Tareas obj = service.listarPorId(id);
		if (obj == null) {
			throw new ModelNotFoundException("Tarea no existe. ID: " + obj.getIdTarea());
		}
		if (obj.getEstadoTarea().equalsIgnoreCase(Constantes.ENPROCESO)) {
			throw new ModelNotFoundException(
					"No se puede eliminar la tarea hasta qeu se finalice ID: " + obj.getIdTarea());
		}
		service.eliminar(id);
		return new ResponseEntity<Void>(HttpStatus.NO_CONTENT);
	}

}
